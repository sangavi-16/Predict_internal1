# -*- coding: utf-8 -*-
"""LVADSUSR109_lab1.ipynb.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1o1PW_vie2H7s4LzLiwPNHHoFZCiSwxeQ
"""

from sklearn.preprocessing import LabelEncoder
from sklearn.tree import DecisionTreeClassifier
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.tree import BaseDecisionTree
from sklearn.linear_model import LinearRegression
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import r2_score,mean_absolute_error,mean_squared_error
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score
from sklearn.ensemble import RandomForestClassifier
from sklearn.preprocessing import StandardScaler

df=pd.read_csv("/content/drive/MyDrive/Predictive/expenses.csv")
print(df)



# Performing EDA
# Checking for the duplicate and nullvalues
print(df.isnull().sum())
print(df.duplicated().sum())
df=df.drop_duplicates()
print(df)
# We have no null values here

#Encoding the categorical values.
encoder=LabelEncoder()
df['sex']=encoder.fit_transform(df['sex'])
df['smoker']=encoder.fit_transform(df['smoker'])
new_val=pd.get_dummies(data=df['region'])
df[['northeast','northwest','southeast','southwest']]=new_val[['northeast','northwest','southeast','southwest']]

df=df.drop(columns='region',axis=1)
print(df)

#Detecting Outlier
Q1 = df.quantile(0.25)
Q3 = df.quantile(0.75)
# Calculate IQR (Interquartile Range)
IQR = Q3 - Q1
outliers = (df < (Q1 - 1.5 * IQR)) | (df > (Q3 + 1.5 * IQR))
# Drop outliers
data_no_outliers = df[~outliers.any(axis=1)]

# Finding correlation between the features
# If any feature have less correlation we can drop that feature
corr=df.corr()
sns.heatmap(corr,annot=True)

X=df.drop(columns='charges',axis=1)
y=df['charges']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = LinearRegression()
model.fit(X_train, y_train)
y_pred_train = model.predict(X_train)
y_pred_test = model.predict(X_test)
train_rmse = mean_squared_error(y_train, y_pred_train, squared=False)
test_rmse = mean_squared_error(y_test, y_pred_test, squared=False)
r2_train = r2_score(y_train, y_pred_train)
r2_test = r2_score(y_test, y_pred_test)

print("Train RMSE:", train_rmse)
print("Test RMSE:", test_rmse)

print("Train R^2:", r2_train)
print("Test R^2:", r2_test)

plt.scatter(r2_train,r2_test)
plt.show()